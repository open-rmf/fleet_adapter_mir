# To init the ROS2 node names used in the script
node_names:
  robot_command_handle: "rmf_mir_fleet_command_handler"
  fleet_state_publisher: "rmf_mir_fleet_state_publisher"
  rmf_fleet_adapter: "DeliveryAdapter"


# Conversions between RMF data and MiR data
conversions:
  reference_coordinates:
    L1: # Map name
      rmf: [[0.0, 0.0],
            [0.0, 1.0],
            [1.0, 1.0],
            [1.0, 0.0]]
      mir: [[0.0, 0.0],
            [0.0, 1.0],
            [1.0, 1.0],
            [1.0, 0.0]]
    L2:
      rmf: [[0.0, 0.0],
            [0.0, 1.0],
            [1.0, 1.0],
            [1.0, 0.0]]
      mir: [[0.0, 0.0],
            [0.0, 1.0],
            [1.0, 1.0],
            [1.0, 0.0]]

  maps:
    # "RMF map name": "Map name stored on MiR"
    L1: "Level 1"
    L2: "Level 2"

  missions:
    move: "rmf_move" # This mission must be predefined
    dock_and_charge: "rmf_dock_and_charge" # This mission must be predefined
    localize: "rmf_localize"
    go_to: "rmf_move_to_position"

  lift_positions:
    lift_1: # Name of lift matching the navigation graph
      L1:
        name: "Level_1_Lift" # Name of lift position stored on the robot on this map
        # tolerance: 0.3
      L2:
        name: "Level_2_Lift"

  marker_types:
    "charger": "Narrow asymmetric MiR500/1000 shelf"

# RMF Fleet parameters
rmf_fleet:
  name: "mir"
  limits:
    linear: [0.7, 0.3] # velocity, acceleration
    angular: [1.0, 0.45]
  profile: # Robot profile is modelled as a circle
    footprint: 0.4
    vicinity: 0.5
  reversible: False
  battery_system:
    voltage: 24.0
    capacity: 40.0
    charging_current: 26.4
  mechanical_system:
    mass: 80.0
    moment_of_inertia: 20.0
    friction_coefficient: 0.20
  ambient_system:
    power: 20.0
  tool_system:
    power: 650.0
  recharge_threshold: 0.01
  recharge_soc: 1.0
  account_for_battery_drain: True
  publish_fleet_state: 1.0 # Publish frequency (Hz) for the fleet state
  task_capabilities: # Specify the types of RMF Tasks that robots in this fleet are capable of performing
    loop: True
    delivery: True
    clean: False
  finishing_request: "charge" # [park, charge, nothing]
  actions: ["rmf_cart_delivery", "delivery_pickup", "delivery_dropoff"]
  robots:
    mir_1:
      charger: "Charger_1"
      max_merge_waypoint_distance: 0.25
      max_merge_lane_distance: 1.0
      mir_config:
        base_url: "http://some.ip.address/api/v2.0.0/"
        user: "application/json"
        password: "Basic HASH_OF_PASSWORD_OBTAINED_AT_API_DOCUMENTATION_PAGE"

  robot_state_update_frequency: 1
  debug: False # whether to enable debug printouts from EasyFullControl

plugins:
  rmf_cart_delivery:
    module: "fleet_adapter_mir_actions.rmf_cart_delivery"
    class: "CartDelivery"
    actions: ["rmf_cart_delivery", "delivery_pickup", "delivery_dropoff"]
    missions:
      dock_to_cart: "rmf_dock_to_cart" # Name of MiR mission for robot to dock under a cart - to be created by fleet adapter upon launch
      pickup: "rmf_pickup_cart" # Name of MiR mission for robot to latch onto a cart - to be created and filled in by user
      dropoff: "rmf_dropoff_cart" # Name of MiR mission for robot to unlatch and exit from under a cart - to be created and filled in by user
      exit_lot: "rmf_exit_lot" # Name of MiR mission for robot to exit from under a cart - to be created by fleet adapter upon launch
      update_footprint: "rmf_update_footprint" # Name of MiR mission for robot to update the footprint of a robot - to be created by fleet adapter upon launch
    footprints:
      robot: "MiR100-200" # Name of robot footprint stored on MiR
      cart: "ShelfCart" # Name of cart footprint stored on MiR
    marker_types:
      cart: "AsymmetricShelf" # Name of cart marker type
    missions_json: "/home/some_user/mir_ws/src/fleet_adapter_mir/missions/rmf_cart_missions.json"  # Filepath to RMF cart delivery missions
    search_timeout: 60
    pickup_dist_threshold: 3.0 # metres
