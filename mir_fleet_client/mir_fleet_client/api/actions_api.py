"""
    2.13.5.3 FLEET REST API

    The REST API for the 2.13.5.3 interface of FLEET  # noqa: E501

    The version of the OpenAPI document: 2.13.5.3
    Contact: support@mir-robots.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from mir_fleet_client.api_client import ApiClient, Endpoint as _Endpoint
from mir_fleet_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from mir_fleet_client.model.error import Error
from mir_fleet_client.model.get_action_definition import GetActionDefinition
from mir_fleet_client.model.get_action_definitions import GetActionDefinitions
from mir_fleet_client.model.get_group_action_definition import GetGroupActionDefinition
from mir_fleet_client.model.get_mission_action import GetMissionAction
from mir_fleet_client.model.get_mission_actions import GetMissionActions
from mir_fleet_client.model.post_action_definition import PostActionDefinition
from mir_fleet_client.model.post_mission_actions import PostMissionActions
from mir_fleet_client.model.put_mission_action import PutMissionAction


class ActionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.actions_action_type_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetActionDefinition,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/actions/{action_type}',
                'operation_id': 'actions_action_type_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'action_type',
                ],
                'required': [
                    'accept_language',
                    'action_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'action_type':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'action_type': 'action_type',
                },
                'location_map': {
                    'accept_language': 'header',
                    'action_type': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.actions_action_type_post_endpoint = _Endpoint(
            settings={
                'response_type': (GetActionDefinition,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/actions/{action_type}',
                'operation_id': 'actions_action_type_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'action_type',
                    'action_definition',
                ],
                'required': [
                    'accept_language',
                    'action_type',
                    'action_definition',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'action_type':
                        (str,),
                    'action_definition':
                        (PostActionDefinition,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'action_type': 'action_type',
                },
                'location_map': {
                    'accept_language': 'header',
                    'action_type': 'path',
                    'action_definition': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.actions_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetActionDefinitions,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/actions',
                'operation_id': 'actions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                ],
                'required': [
                    'accept_language',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                },
                'location_map': {
                    'accept_language': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.mission_groups_mission_group_id_actions_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetGroupActionDefinition,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/mission_groups/{mission_group_id}/actions',
                'operation_id': 'mission_groups_mission_group_id_actions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_group_id',
                ],
                'required': [
                    'accept_language',
                    'mission_group_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_group_id':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_group_id': 'mission_group_id',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_group_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.missions_mission_id_actions_get_endpoint = _Endpoint(
            settings={
                'response_type': ([GetMissionActions],),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/missions/{mission_id}/actions',
                'operation_id': 'missions_mission_id_actions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_id',
                ],
                'required': [
                    'accept_language',
                    'mission_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_id':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_id': 'mission_id',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.missions_mission_id_actions_guid_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/missions/{mission_id}/actions/{guid}',
                'operation_id': 'missions_mission_id_actions_guid_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_id',
                    'guid',
                ],
                'required': [
                    'accept_language',
                    'mission_id',
                    'guid',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_id':
                        (str,),
                    'guid':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_id': 'mission_id',
                    'guid': 'guid',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_id': 'path',
                    'guid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.missions_mission_id_actions_guid_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetMissionAction,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/missions/{mission_id}/actions/{guid}',
                'operation_id': 'missions_mission_id_actions_guid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_id',
                    'guid',
                ],
                'required': [
                    'accept_language',
                    'mission_id',
                    'guid',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_id':
                        (str,),
                    'guid':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_id': 'mission_id',
                    'guid': 'guid',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_id': 'path',
                    'guid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.missions_mission_id_actions_guid_put_endpoint = _Endpoint(
            settings={
                'response_type': (GetMissionAction,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/missions/{mission_id}/actions/{guid}',
                'operation_id': 'missions_mission_id_actions_guid_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_id',
                    'guid',
                    'mission_action',
                ],
                'required': [
                    'accept_language',
                    'mission_id',
                    'guid',
                    'mission_action',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_id':
                        (str,),
                    'guid':
                        (str,),
                    'mission_action':
                        (PutMissionAction,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_id': 'mission_id',
                    'guid': 'guid',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_id': 'path',
                    'guid': 'path',
                    'mission_action': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.missions_mission_id_actions_post_endpoint = _Endpoint(
            settings={
                'response_type': (GetMissionActions,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/missions/{mission_id}/actions',
                'operation_id': 'missions_mission_id_actions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'mission_id',
                    'mission_actions',
                ],
                'required': [
                    'accept_language',
                    'mission_id',
                    'mission_actions',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN_US": "en_US",
                        "DE_DE": "de_DE",
                        "ES_ES": "es_ES",
                        "DA_DK": "da_DK",
                        "ZH_CN": "zh_CN"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'mission_id':
                        (str,),
                    'mission_actions':
                        (PostMissionActions,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'mission_id': 'mission_id',
                },
                'location_map': {
                    'accept_language': 'header',
                    'mission_id': 'path',
                    'mission_actions': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def actions_action_type_get(
        self,
        action_type,
        accept_language="en_US",
        **kwargs
    ):
        """GET /actions/{action_type}  # noqa: E501

        Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actions_action_type_get(action_type, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            action_type (str): The action_type to search for
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetActionDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['action_type'] = \
            action_type
        return self.actions_action_type_get_endpoint.call_with_http_info(**kwargs)

    def actions_action_type_post(
        self,
        action_type,
        action_definition,
        accept_language="en_US",
        **kwargs
    ):
        """POST /actions/{action_type}  # noqa: E501

        Add a new action definition with the specified action_type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actions_action_type_post(action_type, action_definition, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            action_type (str): The action_type to add the new resource to
            action_definition (PostActionDefinition): The details of the action_definition
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetActionDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['action_type'] = \
            action_type
        kwargs['action_definition'] = \
            action_definition
        return self.actions_action_type_post_endpoint.call_with_http_info(**kwargs)

    def actions_get(
        self,
        accept_language="en_US",
        **kwargs
    ):
        """GET /actions  # noqa: E501

        Retrieve the list of action definitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actions_get(accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetActionDefinitions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        return self.actions_get_endpoint.call_with_http_info(**kwargs)

    def mission_groups_mission_group_id_actions_get(
        self,
        mission_group_id,
        accept_language="en_US",
        **kwargs
    ):
        """GET /mission_groups/{mission_group_id}/actions  # noqa: E501

        Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mission_groups_mission_group_id_actions_get(mission_group_id, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_group_id (str): The mission_group_id to search for
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGroupActionDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_group_id'] = \
            mission_group_id
        return self.mission_groups_mission_group_id_actions_get_endpoint.call_with_http_info(**kwargs)

    def missions_mission_id_actions_get(
        self,
        mission_id,
        accept_language="en_US",
        **kwargs
    ):
        """GET /missions/{mission_id}/actions  # noqa: E501

        Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.missions_mission_id_actions_get(mission_id, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_id (str): The mission_id to search for
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetMissionActions]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_id'] = \
            mission_id
        return self.missions_mission_id_actions_get_endpoint.call_with_http_info(**kwargs)

    def missions_mission_id_actions_guid_delete(
        self,
        mission_id,
        guid,
        accept_language="en_US",
        **kwargs
    ):
        """DELETE /missions/{mission_id}/actions/{guid}  # noqa: E501

        Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.missions_mission_id_actions_guid_delete(mission_id, guid, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_id (str): The mission_id to delete
            guid (str): The guid to delete
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_id'] = \
            mission_id
        kwargs['guid'] = \
            guid
        return self.missions_mission_id_actions_guid_delete_endpoint.call_with_http_info(**kwargs)

    def missions_mission_id_actions_guid_get(
        self,
        mission_id,
        guid,
        accept_language="en_US",
        **kwargs
    ):
        """GET /missions/{mission_id}/actions/{guid}  # noqa: E501

        Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.missions_mission_id_actions_guid_get(mission_id, guid, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_id (str): The mission_id to search for
            guid (str): The guid to search for
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMissionAction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_id'] = \
            mission_id
        kwargs['guid'] = \
            guid
        return self.missions_mission_id_actions_guid_get_endpoint.call_with_http_info(**kwargs)

    def missions_mission_id_actions_guid_put(
        self,
        mission_id,
        guid,
        mission_action,
        accept_language="en_US",
        **kwargs
    ):
        """PUT /missions/{mission_id}/actions/{guid}  # noqa: E501

        Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.missions_mission_id_actions_guid_put(mission_id, guid, mission_action, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_id (str): The mission_id to modify
            guid (str): The guid to modify
            mission_action (PutMissionAction): The new values of the mission_action
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMissionAction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_id'] = \
            mission_id
        kwargs['guid'] = \
            guid
        kwargs['mission_action'] = \
            mission_action
        return self.missions_mission_id_actions_guid_put_endpoint.call_with_http_info(**kwargs)

    def missions_mission_id_actions_post(
        self,
        mission_id,
        mission_actions,
        accept_language="en_US",
        **kwargs
    ):
        """POST /missions/{mission_id}/actions  # noqa: E501

        Add a new action to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.missions_mission_id_actions_post(mission_id, mission_actions, accept_language="en_US", async_req=True)
        >>> result = thread.get()

        Args:
            mission_id (str): The mission_id to add the new resource to
            mission_actions (PostMissionActions): The details of the mission_actions
            accept_language (str): Language header. defaults to "en_US", must be one of ["en_US"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMissionActions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accept_language'] = \
            accept_language
        kwargs['mission_id'] = \
            mission_id
        kwargs['mission_actions'] = \
            mission_actions
        return self.missions_mission_id_actions_post_endpoint.call_with_http_info(**kwargs)

